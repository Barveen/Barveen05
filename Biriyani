public class Cutting extends Thread{
    public void run()
    {
        Thread.currentThread().setPriority(10);
        System.out.println("Cut Onions");
        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Preparation.onion = 1;
        System.out.println("Cut Ginger and garlic");
        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Preparation.gingerPaste = 1;
        System.out.println("Cut Tomato");
        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Cut chilly and Mint leaves");
        try
        {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Preparation.veg = 1;
    }
}
public class Masala extends Thread{
    public void run()
    {
        Thread.currentThread().setPriority(9);
        if(Preparation.gingerPaste == 1) {
            System.out.println("Prepare ginger garlic paste");
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            Preparation.gingerPaste = 2;
        }
        System.out.println("Apply mutton masala to mutton");
        try
        {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Preparation.mutton = 1;
        System.out.println("Soak rice");
        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Preparation.rice = 1;
    }
}
import java.util.concurrent.Callable;
import java.util.logging.Logger;

public class Preparation {
    private static final Logger LOGGER
            = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
     static volatile int oil = 1;
    static volatile int onion = 0;
     static volatile int gingerPaste = 0;
     static volatile int veg = 0;
     static volatile int mutton = 0;
     static volatile int spices = 1;
     static volatile int rice = 0;
    public static void main(String [] args) throws InterruptedException {
        Cutting cutting = new Cutting();
        Masala masala = new Masala();
        cutting.start();
        masala.start();
        //masala.join();
        Thread.currentThread().setPriority(1);
        System.out.println("Take vessel and on stove");
        if(oil == 1) {
            System.out.println("Add Ghee , oil ");
            System.out.println("Started heating the vessel");
            System.out.println("Add pattai, kiram, Biriyani leaves");
        }
        if(onion == 1) {
            System.out.println("Add onion");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }if(gingerPaste == 2) {
            System.out.println("Add Ginger garlic paste");
            try {
                Thread.sleep(4000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }if(veg == 1) {
            System.out.println("Add Tomato");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }if(mutton == 1) {
            System.out.println("Add Mutton and add mutton masala and salt");
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }if(rice == 1) {
            System.out.println("Add rice and water");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Close the cooker and wait for 4 whistle");
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Your favourite Biriyani ready");
        }
    }
}
